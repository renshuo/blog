#+title: scala基础


* 模式匹配
#+BEGIN_SRC scala
  a match {
    case "a" => println("a")
    case _ => println("not a")
  }
#+END_SRC
其中，case 后可以跟很多种东西，包括：

具体值：相当于 java 中的 switch；

类型：相当与 java 中的 if (a instanceof xxx)...；

匹配并提取集合，元组中的值：
#+BEGIN_SRC 
    val data = (1, 2, 3)
    data match {
      case (1, x, _) => println(x)
      case _ => println("get none")
    }
#+END_SRC

#+BEGIN_SRC 
case class User1(name: String, age: Int)  
  val u =new User1("", 1)
  u match {
    case User1(name, age) => println(s"get user name: $name")
  }
#+END_SRC


* 并行编程
** 利用并行集合
   在 2.13 版本的 scala，parallel 包被拆分到 org.scala-lang.modules:scala-parallel-collections_2.13 了，所以需要在 gradle 脚本中增加：
#+BEGIN_SRC 
    implementation "org.scala-lang.modules:scala-parallel-collections_2.13:0.2.0"  
#+END_SRC
在代码中引用：
#+BEGIN_SRC scala
  import scala.collection.parallel.CollectionConverters._ 
#+END_SRC
然后就可以在代码中使用 par 方法了：
#+BEGIN_SRC scala
    (0 to times).par.map { i =>
      Future {
        val x = linspace(0, 1, size*2)
        val data = fourierTr(x)
        res.success(data)
      }
    }
#+END_SRC

** 用 actor 模型


** 异步

#+BEGIN_SRC scala
    val res = Promise[DenseVector[Complex]] 
    (0 to times).map { i =>
      Future {
        val x = linspace(0, 1, size*2)
        val data = fourierTr(x)
        res.success(data)
      }
    }
    res.future.onComplete {
      case Success(value) => println(s"succese: $value")
      case Failure(exception) => println("error")
    }
#+END_SRC
创建 times 个 Future，在 res.future.onComplete 中获取结果



* 为什么选 scala 作为图像处理的语言



最终结论是，当性能优先时，只有唯一选择：c++
但是，为什么我这里要选择 scala 呢，基于以下几点：
  1. 职业生涯：c++ 虽然在业内输入流行，但是将来的后续发展，有算法，基于 QT 的 client 端 app 这 2 个，不是我喜欢的方向，何况，我的基本面在 java 方向，后续也应该是 kotlin，scala
  2. 职业生涯 2：scala 是大数据处理行业的通用语言，当硬件不限于便携单板机时，有多台服务器时，就可以利用 spark 的优势了，而这必然是行业数据处理的大方向。另外，学习 scala 后续有进入互联网大数据处理行业的可能，
  3. 业务能力：业务能力是指，一个编程语言有多大能力靠近伪代码。越近则业务描述能力越强，则意味着越容易从代码中看到业务逻辑，越容易帮助理解业务。也更容易的实现正确的模块化。
  4. 性能问题：对于性能，所谓 c++性能优于 scala，是说 c++的性能上限大于 scala，而不是说，我随便写一个 cpp 和 scala 比较，cpp 一定优于 scala。我们写代码对性能的优化达不到语言的上限，所以，c++性能优于 scala 并不是问题。
  5. 参考清华 bbs 的关于 cpp，scala，rust 等的比较帖：http://www.newsmth.net/nForum/#!article/Programming/166256
  6. c++的问题：c++相比 scala，其难度更大，这里说的难度是出现 bug，解决 bug 的难度。以及解决别人写的代码的 bug 的难度。
  7. 性能优化：软件行业的范围太大了，早已经隔行如隔山，我所在的行业和头部的互联网行业的技术水平差距非常大，所以，在行业内很难找到 c++高手，平时所见到的 c++代码都很一般。所以，你是愿意去优化一个 c++代码？还是 scala 代码？不要求你优化到顶级水平，只要一般水平，不出错就行。而且 c++的性能优化要比 scala 困难。
  8. 未来：从历史来看，c++在多年的特性添加上，都存在问题，还导致 c++越来越复杂，而 scala 在这方面比 c++做的更好一些。
  9. 未来 2：编程语言的终极目标就是 lisp。相比 c++，scala 更接近 lisp。lisp 的特点就是数据即代码（算法），代码即数据。如果带入传统公式： 数据+算法=软件 ，即可得出 lisp=软件
  10. 未来 3：软件行业内，新发展的方向几乎没有用 c++的了，就是说，c++的职位会越来越少吧

