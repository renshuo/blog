# 环境说明
1. web端: VUE + webpack
2. 后端: SpringBoot, mongodb，mysql

# 系统设计
## 数据库选择
最初，采用了mysql作为后端数据库，在开发过程中，发现entity太麻烦，尤其是有1对多，多对多的情况下，设计的时候，可以直接使用OneToMany和ManyToMany注解等机制来设计1对多和多对多关系。但是，在更新数据的时候，会比较负责。另外，需要修改entity数据结构时，需要springboot重新生成新表，需要更新测试数据的sql脚本，由于使用了flyway控制数据库版本，使得数据库的修改更复杂。
所以，考虑到前期开发过程中，数据结构会频繁修改，于是改用mongodb存储数据，mongodb的优势在于：

1. 不需要管理schema脚本。
2. 不需要管理1对多，多对多的关系（见下节）
3. 可以不关注数据库版本问题，或者说将数据库版本问题推后到“有时间再说”
4. 可以简化服务设计（见下节）

## document中含有数组数据时的数据设计：
mongodb的每个document都有一个_id字段，作为此document的唯一标识。对于复杂结构的document，可以采用直接存储和dbref的链接模式保存数据。直接存储模式下，整个document被看作一个整体，数据的存取都按照整体存取的方式，这样系统结构会更简单。原因在于，对一个document的某个节点做单独操作是一个比较复杂（代码编写复杂）的事情，比如，你需要更新一个document的一个List中的某个对象的某个节点时，需要用某种方式来标记这个数据，在xml中，就是xpath，在json中没有xpath，只能将需要修改的数据按照完整的结构传递到后端，然后将新数据copy给旧数据（需要保证不需要修改的数据不会丢失），做一个深度拷贝。但是，这里有个问题就是：xpath可以支持子节点为多个，即List模式，用 nodeName[index]的方式表示List中的多个节点中的某一个节点需要更新，在json下就没有这种东西了，所以，之前说的更新方式只能支持不含有数组的document数据。
此时，可采用的数据更新策略有2种：

1. document中，List的元素使用dbRef方式链接到另一个document中，List中只保留引用。这种情况下，更新数据需要指定更新的数据的document类型，对应的id，以及数据内容。需要在后台service中处理此问题，即，root document，List元素document需要分别写service负责更新数据。
2. document中List元素的数据存储在对应位置，不使用dbRef，所有数据都存储在当前document对象中。更新的时候，将这个document数据传递到后台，直接更新已存在的document，这样系统结构会更简单，后台只需要对root document做一个更新service即可。当然，性能会受影响，建议只使用在性能需求不高的地方，另外，不要过早优化。
