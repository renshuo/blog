#+title: 关于编程语言中的数据和流程的想法

* 起源
  这个想法起源于“julia 的多重派发与 java 等的多态有什么区别？”这个问题。在 java 中， function 的名称相同而参数不同，则可以区分多个不同的代码逻辑。这是 oo 中的多态。在 julia 中，function 的名称相同而参数不同，也可以区分多个不同的代码逻辑。这里称作多重派发。
  那么 java 的多态和 julia 的多重派发有一个重要的不同点：java 的 function 必须定义在某个 class 内，天然只有这个 class 的对象才能调用。而 julia 的 function 定义在顶层空间中，不会绑定到某个 class 或者 object 上。所以，在 java 中，当你要调用一个多态方法时，首先是要获取到这个方法所在的 class 的 object，当这个 object 不存在时，则无法使用多态方法（其实可以用 static 方法实现不依赖 object 的多态，但是还是要依赖 class）。julia 中没有这个问题。
  当用户给出一个方法名，以及方法的参数时，在 julia 中就可以定位到一个特定的 function。而 java 中必须要再给出 function 所在的 object, 这个 object 也可以看作是方法的第一个参数。所以，java 里的多态实际上是单派发。

* 本质
  计算机程序的本质实际上是：数据+算法
  数据就是存储在内存中的一段 bit,算法就是一段处理流程
  而我们做编程的，实际上就是对数据和算法的管理。
  
** 数据类型
   数据类型是编程语言对一段内存空间存储的内容的说明和注释。即，确定了一段内存空间存储的是什么。
   不同的编程语言会有不同的数据管理方式。
   
** 算法
   算法就是一段处理流程、处理逻辑，是告诉 cpu 如何运行的流程。

** c 语言
   在 c 语言中，对于数据的管理很简单，就是一些基本类型（Int,Float,double 等）以及数组和结构体等复合类型。其他的没有了。这些基本类型都有固定长度的 bit,struct 也有其确定的 bit 数。c的指针就是用来管理数据的，每一个数据都是通过指针定位的。
   c 语言中的算法也很简单，就是定义的 function。function 只通过名称来定位。
   
** java
   java 中对数据的管理就是 object,每个 object 内的 field 就是数据。object 是有类型的，即使你定义了 2 个属性完全相同的 class,这两个也是不同的类型，object 就是在把 c 语言中的数据添加了一个类型，2个类型不同的 bit 空间，即使内容相同，这 2 端数据也不相等。
   java 中对 function 的管理依赖于 class,即首先确定方法的第一个参数（方法的调用者）对象，然后在根据名称查询方法，最后根据给出的参数(即多态特性)确定具体的 function。所以 java 中定位一个 function 是根据第一参数，方法名，其他参数。


 
    
